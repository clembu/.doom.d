#+TITLE: DOOM emacs configuration
* About this document
This is my [[https://github.com/hlissner/doom-emacs][doom-emacs]] configuration.

It is all written in an [[https://orgmode.org/][org-mode]] file,
from which [[https://www.gnu.org/software/emacs/manual/html_node/elisp/][emacs-lisp]] is extracted by doom to actually configure it.

Not all of the configuration comes from this document, though.

The following emacs-lisp files are written independently:
- =./init.el=
- =./packages.el=

* About me
** Name
#+BEGIN_SRC emacs-lisp :tangle yes
(setq user-full-name "Cl√©ment Busschaert")
#+END_SRC
** E-mail
#+BEGIN_SRC emacs-lisp :tangle yes
(setq user-mail-address "clement.busschaert@gmail.com")
#+END_SRC

* Visuals
Every configuration distribution has its own way to tell emacs what to look
like.

Doom has a few variables to easily give some of that power to the user.

** Fonts
Okay, so here's the part I beg you not to be too judgemental and take a bit of a
step back.

I initially didn't really care about fonts that much. If I could read it, it was
fine enough for me.

Then I discovered [[https://github.com/tonsky/FiraCode][Fira Code]], and its ligatures, and I thought:
#+BEGIN_QUOTE
What a great way to read code!
#+END_QUOTE

So I tried my best to include ligatures in my [[https://github.com/facelesspanda/.spacemacs.d][spacemacs config of the time]].

When I switched to Doom, I realized it already had Fira support built-in, but
also a font called [[https://github.com/be5invis/Iosevka][Iosevka]], which I checked out and liked a lot. So I went and
downloaded a patched font for it (because Emacs doesn't support actual
ligatures).

But some time ago, someone showed me the path of enlightenment. I elevated.
My current font is the following:
#+BEGIN_SRC emacs-lisp :tangle yes
(setq doom-font (font-spec :family "Comic Code" :size 13))
#+END_SRC
You can buy it [[https://www.myfonts.com/fonts/tabular-type-foundry/comic-code/][here]].

It's not ugly. It's readable. It feels nice. And, believe it or not, it feels
like I'm writing my code, and not printing it with a typewriter.

** Theme
I've always been a dark-theme person. Mostly because I come from a 'go to class
during the day, code during the night' style of life. Now, it's been engrained
into my brain and I cannot look at a light theme without having some kind of
/oof!/ reaction.

In spacemacs, I had written [[https://github.com/facelesspanda/.spacemacs.d/blob/ff4d3e2e0d8ae8401435d7380ae52a4b9e7e56dd/layers/display/local/fp-theme/fp-theme.el][my own unfinished theme]] based on the default
spacemacs theme.

When switching to doom, I found the default [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots#doom-one][Doom One]] theme to cover all my
needs.
But I soon started exploring the themes.
And now I'm using [[https://github.com/muirmanders/emacs-nova-theme][Nova (but the doom version)]]:
#+BEGIN_SRC emacs-lisp :tangle yes
(setq doom-theme 'doom-nova)
#+END_SRC

Though, I'm not dead-set on it, and I still might develop my own theme.

** Some tweaks
*** Line numbers
Line numbers are better relative. Fight me. (No seriously, try to change my mind
if you want, because I really don't see a reason to have absolute line numbers.
Ever.)

#+BEGIN_SRC emacs-lisp :tangle yes
(setq display-line-numbers-type 'relative)
#+END_SRC

*** Which Key
By default, which-key appears after two seconds. That's too long for me. Way too
long.

#+BEGIN_SRC emacs-lisp :tangle yes
(setq which-key-idle-delay 0.5)
#+END_SRC

* Keybinds
** Editing the defaults
A lot of Doom's default keybinds are close to what I was used to with Spacemacs,
or make a bit more sense than spacemacs'.

There are just a bit of defaults that I don't find intuitive or that I'll never
use.

For example:
 - Workspace stuff is under =SPC TAB=. I'm used to it being under =SPC l= (=l=
   for =layout=). Mostly I'm used to =SPC TAB= switching buffers.
 - Search resume is under =SPC '=. Makes no sense to me. Resuming should be
   under some keybind that contains =r= to make sense to me. =SPC s r= isn't
   even used in the default config.
 - Help is under =SPC h=. I guess this one was under spacemacs too. For some
   reason I don't like it. It's also under =<f1>= and =C-h= so I'm keeping it
   there and removing the =SPC h= access to maybe have it free for something
   else.
 - Local leader is =SPC m=. That's ok but I like it being on just =,=.

*** Top level leader
First off, that local leader. It's =,=.
#+BEGIN_SRC emacs-lisp :tangle yes
(setq doom-localleader-key ",")
#+END_SRC

Now, get rid of anything I don't like that clutters the top level of the leader
bindings. And replace that =SPC TAB= horror.
#+BEGIN_SRC emacs-lisp :tangle yes
;;; Leader map ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(map! :leader

      ;;; > Erasing unwanted defaults ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      :desc "IGNORED"                         "`"    nil
      :desc "IGNORED"                         "h"    nil
      :desc "IGNORED"                         ","    nil
      :desc "IGNORED"                         "<"    nil
      :desc "IGNORED"                         "'"    nil
      :desc "IGNORED"                         "."    nil

      ;;; > Top-level leader keys ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;;; > > Navigation ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      :desc "Switch to last buffer"           "TAB"  #'evil-switch-to-windows-last-buffer

      ;;; > Sub-maps ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      ;;; > > L is for Layouts ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      :desc "layouts"                         "l"    doom-leader-workspace-map)
#+END_SRC

*** Search
Resume is on =SPC s r=.
#+BEGIN_SRC emacs-lisp :tangle yes
;;; Search map ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(map! :map doom-leader-search-map
      ;;; > Resuming search ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
      :desc "Resume last search"              "r"
        (cond ((featurep! :completion ivy)   #'ivy-resume)
              ((featurep! :completion helm)  #'helm-resume)))
#+END_SRC

** New features
Okay, now to the new stuff.
*** Window dedication
Sometimes I like to lock a window in place to prevent its buffer to change.
Usually I do that with compilation logs, REPL buffers, or magit status buffers.

Spacemacs had that. Here's the function it used.
#+BEGIN_SRC emacs-lisp :tangle yes
;; from http://dfan.org/blog/2009/02/19/emacs-dedicated-windows/
(defun toggle-window-dedication ()
  "Toggle dedication state of a window."
 (interactive)
 (let* ((window    (selected-window))
        (dedicated (window-dedicated-p window)))
   (set-window-dedicated-p window (not dedicated))
   (message "Window %sdedicated to %s"
            (if dedicated "no longer " "")
            (buffer-name))))
#+END_SRC

Spacemacs had that under =SPC w t=. I liked that. Let's do the same.
#+BEGIN_SRC emacs-lisp :tangle yes
(map! :map evil-window-map
      :desc "Set dedication" "t" #'toggle-window-dedication)
#+END_SRC
*** Code items list
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Imenu.html][IMenu]] is a built-in method of constructing code outlines in emacs. It helps
describing definitions, sections, and other items in a buffer.

[[https://github.com/bmag/imenu-list][IMenu-list]] is a third-party package that adds a popup-able menu to list all the
items iMenu has gathered for the current buffer. I like having that sometimes.
Especially in org buffers.
Let's use it.
#+BEGIN_SRC emacs-lisp :tangle yes
(use-package! imenu-list
  :commands imenu-list-smart-toggle)
#+END_SRC

Now where to put it... hmm. It Lists Code items. Hmmm.
#+BEGIN_SRC emacs-lisp :tangle yes
;;; Code map ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(map! :map doom-leader-code-map
      ;;; > Control compilation
      ; putting this here now instead of adding it in a separate block later.
      ; it's useful. I don't need to say why.
      :desc "Kill compilation"                "k"    #'kill-compilation
      ;;; > List items
      :desc "List code items"                 "l"    #'imenu-list-smart-toggle)
#+END_SRC
*** SMerge mode
Doom provides a smerge hydra.
All you need is hooking it up on a binding.
I don't know why it's not by default. I should PR it.
#+BEGIN_SRC emacs-lisp :tangle yes
(map! :map doom-leader-git-map
      :desc "SMerge" "m" #'+vc/smerge-hydra/body)
#+END_SRC

* Eliom
Eliom is a variant of OCaml for multitier programming for the web.
A single file contains both client code and server code.
The problem is OCamlformat doesn't yet support its file extensions, even if
tuareg does.
So we need to help ocamlformat know how to format those files.

#+BEGIN_SRC emacs-lisp :tangle yes
(after! tuareg
  (add-hook! before-save #'ocamlformat-before-save)
  (add-hook! tuareg-mode
    (let ((ext (file-name-extension buffer-file-name t)))
      (cond ((equal ext ".eliom")
             (setq-local ocamlformat-file-kind 'implementation))
            ((equal ext ".eliomi")
             (setq-local ocamlformat-file-kind 'interface))))))
#+END_SRC
